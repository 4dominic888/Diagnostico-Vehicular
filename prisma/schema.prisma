// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  role      String
  email     String    @unique
  password  String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  vehicles  Vehicle[]
}

model Vehicle {
  id         Int          @id @default(autoincrement())
  marca      String
  modelo     String
  year        Int
  motor      String
  vin        String       @unique
  patente    String
  km         Int
  fechaAdq   DateTime
  userId     Int
  lastDiag   DateTime?
  user       User         @relation(fields: [userId], references: [id])
  diagnostics Diagnostic[]
  scannerFiles ScannerFile[]
}

model Dtc {
  code        String    @id
  description String
  category    String
  severity    String
  causes      DtcCause[]
  solutions   DtcSolution[]
  diagnostics DiagnosticDtc[]
}

model DtcCause {
  id     Int    @id @default(autoincrement())
  text   String
  dtcCode String
  dtc    Dtc    @relation(fields: [dtcCode], references: [code])
}

model DtcSolution {
  id     Int    @id @default(autoincrement())
  text   String
  dtcCode String
  dtc    Dtc    @relation(fields: [dtcCode], references: [code])
}

model Symptom {
  id          Int       @id @default(autoincrement())
  category    String
  name        String
  description String
  diagnostics DiagnosticSymptom[]
}

model Diagnostic {
  id          Int       @id @default(autoincrement())
  vehicleId   Int
  fecha       DateTime
  desc        String
  tecnico     String
  estado      String
  detalles    String
  scannerFileId Int?
  cost        Int
  duration    Float
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  scannerFile ScannerFile? @relation(fields: [scannerFileId], references: [id])
  dtcs        DiagnosticDtc[]
  symptoms    DiagnosticSymptom[]
}

model DiagnosticDtc {
  diagnosticId Int
  dtcCode      String
  diagnostic   Diagnostic @relation(fields: [diagnosticId], references: [id])
  dtc          Dtc        @relation(fields: [dtcCode], references: [code])
  solutionText String
  @@id([diagnosticId, dtcCode])
}


model DiagnosticSymptom {
  diagnosticId Int
  symptomId    Int
  diagnostic   Diagnostic @relation(fields: [diagnosticId], references: [id])
  symptom      Symptom    @relation(fields: [symptomId], references: [id])
  @@id([diagnosticId, symptomId])
}

model ScannerFile {
  id          Int      @id @default(autoincrement())
  fileName    String
  uploadDate  DateTime
  vehicleVin  String
  scannerType String
  status      String
  rawData     Json
  vehicle     Vehicle? @relation(fields: [vehicleVin], references: [vin])
  diagnostics Diagnostic[]
}

model Help {
  id       Int    @id @default(autoincrement())
  title    String
  content  String
  category String
}
